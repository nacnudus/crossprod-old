<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crossprod</title><link>http://nacnudus.github.io/crossprod/</link><description>R, data, and frustration</description><atom:link href="http://nacnudus.github.io/crossprod/feeds/tag.r.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 22 Jun 2016 00:00:00 +1200</lastBuildDate><item><title>Creating nests withoutÂ tidyr</title><link>http://nacnudus.github.io/crossprod/creating-nests-without-tidyr</link><description>&lt;p&gt;Unless you begin with an unnested data frame, creating a nested data frame needs
a little trick.  Here it&amp;nbsp;is.&lt;/p&gt;
&lt;h1 id="nested-data-frames"&gt;Nested data&amp;nbsp;frames&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;tidyr&lt;/code&gt; package has a handy function for &lt;em&gt;nesting&lt;/em&gt; data frames.  Hadley
Wickham describes it &lt;a href="https://blog.rstudio.org/2016/02/02/tidyr-0-4-0/"&gt;thus&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a grouped data frame, you have one row per observation, and additional
metadata define the groups. In a nested data frame, you have one row per
group, and the individual observations are stored in a column that is a list
of data frames. This is a useful structure when you have lists of other
objects (like models) with one element per&amp;nbsp;group.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&amp;#8217;s a small&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dplyr&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;tidyr&lt;span class="p"&gt;)&lt;/span&gt;

iris_nested &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; 
  iris &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  group_by&lt;span class="p"&gt;(&lt;/span&gt;Species&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  sample_n&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  nest
iris_nested
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## Source: local data frame [3 x 2]
## 
##      Species           data
##       &amp;lt;fctr&amp;gt;         &amp;lt;list&amp;gt;
## 1     setosa &amp;lt;tbl_df [2,4]&amp;gt;
## 2 versicolor &amp;lt;tbl_df [2,4]&amp;gt;
## 3  virginica &amp;lt;tbl_df [2,4]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;iris_nested &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; str
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    3 obs. of  2 variables:
##  $ Species: Factor w/ 3 levels &amp;quot;setosa&amp;quot;,&amp;quot;versicolor&amp;quot;,..: 1 2 3
##  $ data   :List of 3
##   ..$ :Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;: 2 obs. of  4 variables:
##   .. ..$ Sepal.Length: num  5.1 5.1
##   .. ..$ Sepal.Width : num  3.7 3.8
##   .. ..$ Petal.Length: num  1.5 1.6
##   .. ..$ Petal.Width : num  0.4 0.2
##   ..$ :Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;: 2 obs. of  4 variables:
##   .. ..$ Sepal.Length: num  5.6 6.5
##   .. ..$ Sepal.Width : num  2.5 2.8
##   .. ..$ Petal.Length: num  3.9 4.6
##   .. ..$ Petal.Width : num  1.1 1.5
##   ..$ :Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;: 2 obs. of  4 variables:
##   .. ..$ Sepal.Length: num  7.7 6.3
##   .. ..$ Sepal.Width : num  2.6 2.9
##   .. ..$ Petal.Length: num  6.9 5.6
##   .. ..$ Petal.Width : num  2.3 1.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interestingly, the nested column isn&amp;#8217;t a vector like ordinary columns; it&amp;#8217;s a
list.  Actually lists are just one kind of vector &amp;#8212; the non-atomic kind
(composed of parts, i.e vectors and other lists), whereas
integer/character/etc. vectors are the atomic kind (not composed of parts).
This is nicely explained in &lt;a href="http://adv-r.had.co.nz/Data-structures.html#vectors"&gt;Advanced
R&lt;/a&gt; by Hadley&amp;nbsp;Wickham.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kp"&gt;is.atomic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mode &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; length &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] TRUE
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kp"&gt;is.atomic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mode &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; length &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] FALSE
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="please-say-its-a-data-frame"&gt;Please say it&amp;#8217;s a data&amp;nbsp;frame&lt;/h1&gt;
&lt;p&gt;Data frames, which are a list of vectors, handle list-type columns perfectly
well, but data-frame-construction functions don&amp;#8217;t. So when I tried to create
one from scratch (rather than by nesting an existing data frame as above), I
lost a lot of time mucking about with &lt;code&gt;data.frame()&lt;/code&gt; and the&amp;nbsp;like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;X1 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; X2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;,&lt;/span&gt; mtcars&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...,&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt; &lt;span class="nx"&gt;imply&lt;/span&gt; &lt;span class="nx"&gt;differing&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kp"&gt;as.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;X1 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; X2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;,&lt;/span&gt; mtcars&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...,&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt; &lt;span class="nx"&gt;imply&lt;/span&gt; &lt;span class="nx"&gt;differing&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="its-a-data-frame-because-i-say-so"&gt;It&amp;#8217;s a data frame because I say&amp;nbsp;so&lt;/h1&gt;
&lt;p&gt;The answer is to simply tell R that the data structure is a data frame by
setting its class and giving it a &amp;#8220;row.names&amp;#8221;&amp;nbsp;attribute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;X1 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; X2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; iris&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="kp"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; class &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tbl_df&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;data.frame&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; row.names &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## Source: local data frame [2 x 2]
## 
##      X1                 X2
##   &amp;lt;int&amp;gt;             &amp;lt;list&amp;gt;
## 1     1 &amp;lt;data.frame [2,2]&amp;gt;
## 2     2 &amp;lt;data.frame [3,4]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="invading-the-nest"&gt;Invading the&amp;nbsp;nest&lt;/h1&gt;
&lt;p&gt;Accessing the nested column by the usual subsetting
operators, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;[[&lt;/code&gt;, is a little&amp;nbsp;clumsy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;x&lt;span class="o"&gt;$&lt;/span&gt;X2 &lt;span class="c1"&gt;# Returns the list of data frames&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [[1]]
##   Sepal.Length Sepal.Width
## 1          5.1         3.5
## 2          4.9         3.0
## 
## [[2]]
##   Sepal.Length Sepal.Width Petal.Length Petal.Width
## 3          4.7         3.2          1.3         0.2
## 4          4.6         3.1          1.5         0.2
## 5          5.0         3.6          1.4         0.2
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;x&lt;span class="o"&gt;$&lt;/span&gt;X2&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Returns the second data frame, wrapped in a list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [[1]]
##   Sepal.Length Sepal.Width Petal.Length Petal.Width
## 3          4.7         3.2          1.3         0.2
## 4          4.6         3.1          1.5         0.2
## 5          5.0         3.6          1.4         0.2
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;x&lt;span class="o"&gt;$&lt;/span&gt;X2&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# Returns the second data frame -- probably what you want&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width
## 3          4.7         3.2          1.3         0.2
## 4          4.6         3.1          1.5         0.2
## 5          5.0         3.6          1.4         0.2
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;x&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]][[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# Returns the second data frame -- also probably what you want&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width
## 3          4.7         3.2          1.3         0.2
## 4          4.6         3.1          1.5         0.2
## 5          5.0         3.6          1.4         0.2
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;x&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;X2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Returns the second data frame wrapped in another data frame&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## Error in x[2, &amp;quot;X2&amp;quot;]: incorrect number of dimensions
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;x&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;X2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; drop &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Same -- ignores &amp;quot;drop&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## Error in x[2, &amp;quot;X2&amp;quot;, drop = TRUE]: incorrect number of dimensions
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;x&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;X2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;X2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;X2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# The `[` goes around in circles&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## Error in x[2, &amp;quot;X2&amp;quot;]: incorrect number of dimensions
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Garmonsway</dc:creator><pubDate>Wed, 22 Jun 2016 00:00:00 +1200</pubDate><guid>tag:nacnudus.github.io,2016-06-22:crossprod/creating-nests-without-tidyr</guid><category>R</category><category>tidyr</category></item><item><title>Brexit poll ofÂ polls</title><link>http://nacnudus.github.io/crossprod/brexit-poll-of-polls</link><description>&lt;p&gt;This post does the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Re-works the Financial Times poll-of-polls&amp;nbsp;graph&lt;/li&gt;
&lt;li&gt;Explores the relationship between sample size, polling method, and voting&amp;nbsp;intention.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="data"&gt;Data&lt;/h2&gt;
&lt;p&gt;I scraped the poll data from the &lt;a href="https://ig.ft.com/sites/brexit-polling"&gt;Financial Times poll of
polls&lt;/a&gt;.  The Financial Times made this
graph of&amp;nbsp;it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="https://ig.ft.com/sites/brexit-polling" src="figure/brexit-ft-polls.png" /&gt;&lt;/p&gt;
&lt;p&gt;To check a later inference about sample sizes and online/telephone methods, I
also scraped polling data from the &lt;a href="http://www.bbc.co.uk/news/uk-politics-eu-referendum-36271589"&gt;&lt;span class="caps"&gt;BBC&lt;/span&gt; poll of
polls&lt;/a&gt; and used it
to augment the Financial Times data with the polling&amp;nbsp;method.  &lt;/p&gt;
&lt;p&gt;My analysis focusses on the Financial Times data, because the sample sizes are
provided, there is a longer time-series, and I didn&amp;#8217;t notice the &lt;span class="caps"&gt;BBC&lt;/span&gt;&amp;#8217;s version
until I&amp;#8217;d done most of the&amp;nbsp;work.&lt;/p&gt;
&lt;h2 id="reworking-the-graph"&gt;Reworking the&amp;nbsp;graph&lt;/h2&gt;
&lt;p&gt;The Financial Times graph emphasises the poll-of-polls statistic, and the
difference between online and telephone polls.  In my version, I want to
emphasise the outcomes (the majority in each poll), the margins of the
majorities, and the sample sizes.  I also present the full&amp;nbsp;series.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-timeseries1-1.svg" title="plot of chunk brexit-timeseries1" alt="plot of chunk brexit-timeseries1" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;I would have included the poll-of-polls statistic on my graph, since the
Financial Times describes their method in a&amp;nbsp;footnote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;span class="caps"&gt;FT&lt;/span&gt; poll of polls is calculated by taking the last seven polls from unique
pollsters up to a given date, removing the two polls with the highest and
lowest shares for &amp;#8216;remain&amp;#8217;, and calculating an adjusted average of the five
remaining polls, where the more recent polls are given a higher&amp;nbsp;weight&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, besides omitting the weights, and their tie-breaking policy,
their statistic has obviously been redesigned since the footnote was written,
because their current statistic for &amp;#8216;remain&amp;#8217; is higher than the second-highest
&amp;#8216;remain&amp;#8217; result in the last seven&amp;nbsp;polls.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s that graph again, but this time beginning in September 2015 like the
Financial&amp;nbsp;Times.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-timeseries2-1.svg" title="plot of chunk brexit-timeseries2" alt="plot of chunk brexit-timeseries2" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;Something worth noticing is that the &amp;#8216;leave&amp;#8217; majorities are mostly large
samples.  Comparing this graph with the one by the Financial Times, sample size
seems to be a proxy for telephone (small) vs online (large) polling methods.
Let&amp;#8217;s&amp;nbsp;check.&lt;/p&gt;
&lt;p&gt;Although the Financial Times graph distinguishes between online/telephone
methods, that information isn&amp;#8217;t included in the table, despite its obvious
&lt;a href="https://yougov.co.uk/news/2016/02/23/commentary-what-explains-difference-between-phone-"&gt;importance&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thereâs a big difference between the online and telephone polls on the &lt;span class="caps"&gt;EU&lt;/span&gt;
referendum â with online polls showing the sides neck-and neck and telephone
polls showing about a 15% gap in favour of âremainâ.&amp;nbsp;Why?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fortunately, for most polls in the last six months, data from the &lt;a href="http://www.bbc.co.uk/news/uk-politics-eu-referendum-36271589"&gt;&lt;span class="caps"&gt;BBC&lt;/span&gt;&amp;#8217;s poll of
polls&lt;/a&gt; can augment
the Financial Times data with online/telephone information.  As the following
frequency table shows, in nearly all matched polls, large samples correspond
with an online method.  So while large samples appear to favour &amp;#8216;leave&amp;#8217;, it may
simply be that online polls&amp;nbsp;do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;##         
##          online phone &amp;lt;NA&amp;gt; Sum
##   &amp;lt; 1400      8    18   35  61
##   â¥ 1400     67     0  114 181
##   &amp;lt;NA&amp;gt;       10     5    0  15
##   Sum        85    23  149 257
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, telephone polls do not necessarily favour either side.  Comparing the
frequencies of outcomes with first methods and then sample sizes, the
association between small sample sizes and a &amp;#8216;remain&amp;#8217; outcome appears to be much
stronger than between &amp;#8216;online&amp;#8217; and &amp;#8216;remain&amp;#8217; or &amp;#8216;phone&amp;#8217; and &amp;#8216;remain&amp;#8217;.  Perhaps
this is why the financial markets apparently regard telephone polls as more
reliable, despite the smaller sample&amp;nbsp;sizes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;##         
##          leave remain &amp;lt;NA&amp;gt; Sum
##   online    26     49   10  85
##   phone      1     17    5  23
##   &amp;lt;NA&amp;gt;      52     97    0 149
##   Sum       79    163   15 257
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;##         
##          leave remain &amp;lt;NA&amp;gt; Sum
##   &amp;lt; 1400    15     46    0  61
##   â¥ 1400    64    117    0 181
##   &amp;lt;NA&amp;gt;       0      0   15  15
##   Sum       79    163   15 257
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="outcome-by-sample-size-polling-method"&gt;Outcome by sample size / polling&amp;nbsp;method&lt;/h2&gt;
&lt;p&gt;I already noted that &amp;#8216;leave&amp;#8217; majorities tend to come from large-sample/online
polls.  The next graph makes this more&amp;nbsp;obvious.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-outcome-by-sample-size-1.svg" title="plot of chunk brexit-outcome-by-sample-size" alt="plot of chunk brexit-outcome-by-sample-size" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;h2 id="justification-of-largesmall-threshold"&gt;Justification of large/small&amp;nbsp;threshold&lt;/h2&gt;
&lt;p&gt;But how did I choose 1400 as the boundary between small and large samples?  It&amp;#8217;s
because of the following visualisations,  Polls with samples smaller than 1400
just seem to behave differently. Perhaps small samples don&amp;#8217;t find the &amp;#8216;leave&amp;#8217;
voters, or perhaps they &lt;em&gt;do&lt;/em&gt; find the &amp;#8216;remain&amp;#8217;&amp;nbsp;ones.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-remain-by-sample-size-1.svg" title="plot of chunk brexit-remain-by-sample-size" alt="plot of chunk brexit-remain-by-sample-size" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;Smaller samples also don&amp;#8217;t find the undecided people (this is not quite as
convincing as the graph&amp;nbsp;above).&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-undecided-by-sample-size-1.svg" title="plot of chunk brexit-undecided-by-sample-size" alt="plot of chunk brexit-undecided-by-sample-size" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;Checking this against the method data from the &lt;span class="caps"&gt;BBC&lt;/span&gt;, I&amp;#8217;m arguably on the right
track.  It would obviously be best to know the method as well as the sample
size, but since I&amp;#8217;m using the Financial Times data, and since I don&amp;#8217;t have the
method of so many of those polls (grey points below), I have focussed on sample
size&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-method-vs-sample-size-1.svg" title="plot of chunk brexit-method-vs-sample-size" alt="plot of chunk brexit-method-vs-sample-size" width="960px" height="540px" /&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-method-vs-sample-size-2.svg" title="plot of chunk brexit-method-vs-sample-size" alt="plot of chunk brexit-method-vs-sample-size" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;h2 id="indecision-favours-a-leave-outcome-part-i-graph"&gt;Indecision favours a &amp;#8216;leave&amp;#8217; outcome: Part I &amp;#8212;&amp;nbsp;graph&lt;/h2&gt;
&lt;p&gt;Here I can use stats, the only stats I&amp;#8217;ve ever been taught (the really
out-of-date stuff), to explore whether undecided voters will favour the status
quo.  (What is my status quo, anyway &amp;#8212; that we&amp;#8217;re in Europe now, or that I&amp;#8217;ve
always wanted to&amp;nbsp;leave?)&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the association between indecision and the &amp;#8216;remain&amp;#8217;&amp;nbsp;vote.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-indecision-by-remain-1.svg" title="plot of chunk brexit-indecision-by-remain" alt="plot of chunk brexit-indecision-by-remain" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;h2 id="intermission-obvious-glitch"&gt;Intermission (obvious&amp;nbsp;glitch)&lt;/h2&gt;
&lt;p&gt;A few &amp;#8216;remain&amp;#8217; majorities are below the &amp;#8216;win&amp;#8217; threshold in the graph above
(green points below the dotted line).  That could be because of missing
&amp;#8220;won&amp;#8217;t vote&amp;#8221; information.  See YouGov&amp;#8217;s
&lt;a href="https://yougov.co.uk/news/2016/02/23/commentary-what-explains-difference-between-phone-"&gt;explanation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Telephone polls ask their respondents âHow will you vote in the
referendum?â People are assumed to have an opinion, and 90% of them give 
one. By contrast, online polls present people with options: remain, leave,
wonât vote, donât know â there is less assumption of an opinion, and 20% or
more donât offer&amp;nbsp;one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few polls total much less than 100%, probably for the same reason, but it
isn&amp;#8217;t a problem in most&amp;nbsp;cases.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-totals-1.svg" title="plot of chunk brexit-totals" alt="plot of chunk brexit-totals" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;h2 id="indecision-favours-a-leave-outcome-part-ii-stats"&gt;Indecision favours a &amp;#8216;leave&amp;#8217; outcome: Part &lt;span class="caps"&gt;II&lt;/span&gt; &amp;#8212;&amp;nbsp;stats&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ve already seen the non-linearity of sample size vs everything, so I build
two models, first for large samples, then for small&amp;nbsp;ones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## 
## Call:
## lm(formula = remain ~ undecided, data = master_ft %&amp;gt;% filter(sample_size == 
##     &amp;quot;â¥ 1400&amp;quot;))
## 
## Residuals:
##       Min        1Q    Median        3Q       Max 
## -0.152068 -0.015749  0.004864  0.024251  0.100785 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  0.49431    0.01027  48.130  &amp;lt; 2e-16 ***
## undecided   -0.46932    0.05599  -8.383 1.49e-14 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 0.03745 on 179 degrees of freedom
## Multiple R-squared:  0.2819, Adjusted R-squared:  0.2779 
## F-statistic: 70.27 on 1 and 179 DF,  p-value: 1.487e-14
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The coefficient of &amp;#8216;undecided&amp;#8217; is nearly -0.5, suggesting that undecided
large-sample voters about as likely to vote either way (lines almost parallel in
the graph below).  But as proportion of undecided voters reduces, at what point
does the &amp;#8216;remain&amp;#8217; outcome start to benefit?  (this analysis will be more
meaningful for small samples, in just a&amp;nbsp;moment).&lt;/p&gt;
&lt;p&gt;There are two linear functions: the fitted model, and the threshold of a
majority (depending on the proportion of voters who are undecided).  Not only
can we plot these functions (and base R is simplest here), but we can solve
them for the fulcrum, which turns out to be about 19%.  If the proportion of
voters who are undecided is below 19%, then outcome is likely to be&amp;nbsp;&amp;#8216;remain&amp;#8217;.&lt;/p&gt;
&lt;p&gt;I exhibit the R code here, for anyone interested in plotting functions and
solving&amp;nbsp;them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remain &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;coef&lt;span class="p"&gt;(&lt;/span&gt;lm_large&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; x &lt;span class="o"&gt;+&lt;/span&gt; coef&lt;span class="p"&gt;(&lt;/span&gt;lm_large&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
majority &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;remain&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; xlab &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;undecided&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;majority&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;brown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; add &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-fulcrum-large-1.svg" title="plot of chunk brexit-fulcrum-large" alt="plot of chunk brexit-fulcrum-large" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fulcrum &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;remain&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; majority&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)}&lt;/span&gt;
uniroot&lt;span class="p"&gt;(&lt;/span&gt;fulcrum&lt;span class="p"&gt;,&lt;/span&gt; interval &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;root
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 0.1855785
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;master_ft &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; filter&lt;span class="p"&gt;(&lt;/span&gt;sample_size &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;â¥ 1400&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; undecided &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0.1855785&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="kp"&gt;nrow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 89
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &amp;#8220;small&amp;#8221; may be a proxy for &amp;#8220;online&amp;#8221;, let&amp;#8217;s model that,&amp;nbsp;too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## 
## Call:
## lm(formula = remain ~ undecided, data = master_ft %&amp;gt;% filter(sample_size == 
##     &amp;quot;&amp;lt; 1400&amp;quot;))
## 
## Residuals:
##       Min        1Q    Median        3Q       Max 
## -0.147178 -0.028871  0.004515  0.035027  0.178669 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  0.57795    0.01514  38.177  &amp;lt; 2e-16 ***
## undecided   -0.80511    0.09922  -8.114 3.51e-11 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 0.05248 on 59 degrees of freedom
## Multiple R-squared:  0.5274, Adjusted R-squared:  0.5194 
## F-statistic: 65.84 on 1 and 59 DF,  p-value: 3.507e-11
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time, the coefficient of undecided is about -0.8, suggesting that
undecided small-sample voters are more likely to vote to remain.  The fulrum,
now much more meaningful than above, given the coefficient, is at about 26%,
with a caveat that there are only five observations above&amp;nbsp;26%.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remain &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;coef&lt;span class="p"&gt;(&lt;/span&gt;lm_small&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; x &lt;span class="o"&gt;+&lt;/span&gt; coef&lt;span class="p"&gt;(&lt;/span&gt;lm_small&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
majority &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;remain&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; xlab &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;undecided&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;majority&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;brown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; add &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-fulcrum-small-1.svg" title="plot of chunk brexit-fulcrum-small" alt="plot of chunk brexit-fulcrum-small" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fulcrum &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;remain&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; majority&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)}&lt;/span&gt;
uniroot&lt;span class="p"&gt;(&lt;/span&gt;fulcrum&lt;span class="p"&gt;,&lt;/span&gt; interval &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;root
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 0.2554619
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;master_ft &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; filter&lt;span class="p"&gt;(&lt;/span&gt;sample_size &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt; 1400&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; undecided &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0.255461&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="kp"&gt;nrow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 5
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="zero-undecided-voters"&gt;Zero undecided&amp;nbsp;voters&lt;/h2&gt;
&lt;p&gt;Finally, what about the five zero-undecided polls (the five points along the
bottom of the timeseries)?  It turns out that those polls were all conducted by
the &lt;span class="caps"&gt;ORB&lt;/span&gt; company, and they&amp;#8217;re also the large-sample polls by &lt;span class="caps"&gt;ORB&lt;/span&gt;.  They aren&amp;#8217;t
included in the &lt;span class="caps"&gt;BBC&lt;/span&gt; data, so we can&amp;#8217;t tell whether or not they are online polls.
Make of them what you&amp;nbsp;will.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## Source: local data frame [5 x 11]
## 
##   remain leave undecided       date pollster sample sample_size majority
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;date&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;       &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;
## 1   0.50  0.50         0 2016-04-29      ORB   2000      â¥ 1400   remain
## 2   0.51  0.49         0 2016-03-28      ORB   2002      â¥ 1400   remain
## 3   0.48  0.52         0 2015-11-19      ORB   2067      â¥ 1400    leave
## 4   0.53  0.47         0 2015-10-25      ORB   2015      â¥ 1400   remain
## 5   0.55  0.45         0 2015-09-06      ORB   2044      â¥ 1400   remain
## Variables not shown: max_percent &amp;lt;dbl&amp;gt;, min_percent &amp;lt;dbl&amp;gt;, method &amp;lt;chr&amp;gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/brexit-zero-undecided-1.svg" title="plot of chunk brexit-zero-undecided" alt="plot of chunk brexit-zero-undecided" width="960px" height="540px" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Garmonsway</dc:creator><pubDate>Mon, 13 Jun 2016 00:00:00 +1200</pubDate><guid>tag:nacnudus.github.io,2016-06-13:crossprod/brexit-poll-of-polls</guid><category>R</category><category>polls</category><category>Brexit</category></item><item><title>Simmer vs SimPy: The Bank, Part II</title><link>http://nacnudus.github.io/crossprod/simmer-vs-simpy-the-bank-part-ii</link><description>&lt;h2 id="simmer-vs-simpy-rematch"&gt;Simmer vs SimPy&amp;nbsp;(rematch)&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="http://nacnudus.github.io/crossprod/simmer-vs-simpy-the-bank-part-i"&gt;previous post&lt;/a&gt;, I ported &lt;a href="https://pythonhosted.org/SimPy/Tutorials/TheBank.html"&gt;Part I&lt;/a&gt; of &lt;code&gt;SimPy&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s flagship
tutorial, &lt;em&gt;The Bank&lt;/em&gt;, to &lt;code&gt;simmer&lt;/code&gt;.  This post does the same for &lt;a href="https://pythonhosted.org/SimPy/Tutorials/TheBank2.html"&gt;Part &lt;span class="caps"&gt;II&lt;/span&gt;&lt;/a&gt;, which introduces tricky concepts for tricky&amp;nbsp;customers.&lt;/p&gt;
&lt;p&gt;This post does two&amp;nbsp;things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discusses some difficulties implementing The Bank: Part &lt;span class="caps"&gt;II&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Suggests some reasons why simulation is hard (blame&amp;nbsp;humans).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-bank"&gt;The&amp;nbsp;Bank&lt;/h2&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;The Bank&amp;#8217; is a tutorial that develops &lt;span class="caps"&gt;DES&lt;/span&gt; concepts and techniques by simulating
the paths of customers at a bank.  The arrivals (customers) queue for a server
(counter), are served, and&amp;nbsp;exit.&lt;/p&gt;
&lt;h2 id="complete-code"&gt;Complete&amp;nbsp;code&lt;/h2&gt;
&lt;p&gt;The actual ported code is available &lt;a href="https://github.com/nacnudus/simmer-bank"&gt;on
GitHub&lt;/a&gt;, and I only give simple
examples in this&amp;nbsp;post.&lt;/p&gt;
&lt;h2 id="priority-and-pre-emption"&gt;Priority and&amp;nbsp;pre-emption&lt;/h2&gt;
&lt;p&gt;High-priority arrivals (customers) go straight to the front of the queue.  When
pre-emption is allowed, they can even barge they way onto a busy server,
interrupting an arrival (customer) that is already being&amp;nbsp;served.&lt;/p&gt;
&lt;p&gt;Priority and pre-emption has only recently been added to &lt;code&gt;simmer&lt;/code&gt;, and it still
feels a bit clumsy.  The complications arise because events have to be
rescheduled, and decisions have to be remade.  For&amp;nbsp;example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a server is serving several arrivals at once, which one should be
  interrupted by a higher-priority arrival?  &lt;code&gt;Simmer&lt;/code&gt; already implements
  first-in-first-out (&lt;span class="caps"&gt;FIFO&lt;/span&gt;) and last-in-first-out (&lt;span class="caps"&gt;LIFO&lt;/span&gt;)&amp;nbsp;policies.&lt;/li&gt;
&lt;li&gt;When an arrival is interrupted while being served, and then resumes service,
  should they start again (repeating the first period of their service time) or
  carry on from where they left off (completing their remaining service time).
  &lt;code&gt;Simmer&lt;/code&gt; already implements these two options, but it&amp;#8217;s reasonable to suppose
  that resumption of service might come with a time penalty, and it doesn&amp;#8217;t
  currently seem to be possible to express such a&amp;nbsp;penalty.&lt;/li&gt;
&lt;li&gt;While an interrupted arrival is waiting to return to the server, where do they
  wait?  This matters in a finite queue.  Currently, &lt;code&gt;simmer&lt;/code&gt; allows the arrival
  to wait in the finite queue, even if the queue is already full and rejecting
  new arrivals.  To change this behaviour, one would have to define a policy for
  ejecting arrivals from the queue to maintain the constraint on its&amp;nbsp;size.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="balking-and-reneging"&gt;Balking and&amp;nbsp;reneging&lt;/h2&gt;
&lt;p&gt;Balking is the behaviour of an arrival that, for some reason, never enters a
queue.  The example in The Bank Tutorial is the case when a finite queue is
full, so the arrival is rejected.  An alternative might be that the arrival
decides whether or not to enter the queue according to the number of arrivals
already in it.  That scenario can already be implemented in &lt;code&gt;simmer&lt;/code&gt; by branching
based on an enquiry into the state of the&amp;nbsp;queue.&lt;/p&gt;
&lt;p&gt;Reneging is the behaviour of an arrival already in a queue, who decides to leave
it.  This isn&amp;#8217;t yet possible in &lt;code&gt;simmer&lt;/code&gt;, but the authors have indulged me in
several discussions about it, on
&lt;a href="https://github.com/r-simmer/simmer/issues"&gt;GitHub&lt;/a&gt; and in the &lt;a href="https://groups.google.com/forum/#!forum/simmer-devel"&gt;discussion
forum&lt;/a&gt;.  The difficulty,
as I currently see it, is that the &lt;code&gt;seize&lt;/code&gt; function, by handling the whole
interval between entering the queue and reaching the server, makes the queueing
period relatively inaccessible.  If one wanted an arrival to renege from one
queue and branch instead into another queue, there is no way to express that
inside the &lt;code&gt;seize&lt;/code&gt; function.  If one wanted other customers in the queue to
reassess their patience, based on customers ahead of them reneging, then there
is no way to express that idea&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;To be fair to the &lt;code&gt;simmer&lt;/code&gt; authors, these ideas weren&amp;#8217;t present in early
versions of &lt;code&gt;SimPy&lt;/code&gt; either, and were still clumsy when The Bank: Part &lt;span class="caps"&gt;II&lt;/span&gt; was
written.  It also can&amp;#8217;t be easy to separate the concept of queueing from the
&lt;code&gt;seize&lt;/code&gt; function, since this is probably the most computationally-expensive
aspect of modelling, which has, very sensibly, been implemented in&amp;nbsp;C++.&lt;/p&gt;
&lt;h2 id="interruption"&gt;Interruption&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SimPy&lt;/code&gt; provides functions for interrupting an arrival that is being served.
The examples in The Bank Tutorial don&amp;#8217;t convince me that special functions are
necessary. Why not simply increase their service time?  That&amp;#8217;s certainly how I
implemented interruptions in &lt;code&gt;simmer&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="wait-until"&gt;Wait&amp;nbsp;until&lt;/h2&gt;
&lt;p&gt;Another relatively new feature of &lt;code&gt;simmer&lt;/code&gt; is the ability to schedule the
capacity of resources at certain times.  I used schedules to implement the bank
opening in the morning, and to &amp;#8216;open the door&amp;#8217; once every 30 minutes to let in
any customers that are queueing&amp;nbsp;outside.&lt;/p&gt;
&lt;p&gt;The scheduling feature can be periodic, which is wonderful, but it isn&amp;#8217;t
currently possible to schedule a single change in capacity that then endures
indefinitely.  See
&lt;a href="https://github.com/nacnudus/simmer-bank/blob/master/17-waituntil.R"&gt;GitHub&lt;/a&gt; for
examples.  It also doesn&amp;#8217;t seem to be possible to schedule infinite&amp;nbsp;capacity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[&lt;span class="caps"&gt;EDIT&lt;/span&gt;]&lt;/strong&gt;  I was wrong.  It is possible to do both those&amp;nbsp;things.&lt;/p&gt;
&lt;h2 id="monitoring-and-plotting"&gt;Monitoring and&amp;nbsp;plotting&lt;/h2&gt;
&lt;p&gt;Here is where &lt;code&gt;simmer&lt;/code&gt; continues to excel, providing far simpler and
more-intuitive monitoring of arrivals, resources and attributes, in handy data
frames for straightforward plotting with any graphics&amp;nbsp;library.&lt;/p&gt;
&lt;h2 id="simulation-is-hard"&gt;Simulation is&amp;nbsp;hard&lt;/h2&gt;
&lt;p&gt;Because human behaviour is hard.  Real-life systems involving humans are
massively parallel.  Every actor processes his/her own activities onto the
universal time-line.  As long as computers have very finite numbers of
processors, simulation libraries will have to find ways to express this
parallelism in a way that computers can serialise.  When actors in a system
influence each-other&amp;#8217;s behaviour, the computational difficulties of serialising
their behaviour begin to meet the boundaries of efficient&amp;nbsp;computation.&lt;/p&gt;
&lt;p&gt;The authors of &lt;code&gt;simmer&lt;/code&gt; have a very generous attitude towards suggestions and
discussion, like so many R developers.  No doubt that this post will soon become
obsolete by their&amp;nbsp;efforts.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Garmonsway</dc:creator><pubDate>Mon, 06 Jun 2016 00:00:00 +1200</pubDate><guid>tag:nacnudus.github.io,2016-06-06:crossprod/simmer-vs-simpy-the-bank-part-ii</guid><category>R</category><category>Simmer</category><category>SimPy</category></item><item><title>Simmer vs SimPy: The Bank, PartÂ I</title><link>http://nacnudus.github.io/crossprod/simmer-vs-simpy-the-bank-part-i</link><description>&lt;h2 id="simmer-vs-simpy"&gt;Simmer vs&amp;nbsp;SimPy&lt;/h2&gt;
&lt;p&gt;Which package would be easier for teaching queueing theory?  Python 2.7&amp;#8217;s
&lt;a href="https://pythonhosted.org/SimPy/SimPy_Overview.html"&gt;&lt;code&gt;SimPy&lt;/code&gt;&lt;/a&gt;, designed for
(as far as I can tell) lecturing, by Tony Vigneau at my alma mater, Vic Uni
Wellington &lt;span class="caps"&gt;NZ&lt;/span&gt;, or &lt;a href="http://r-simmer.org/"&gt;&lt;code&gt;simmer&lt;/code&gt;&lt;/a&gt;, designed by Bart Smeets and
IÃ±aki Ucar to (as far as I can tell) actually&amp;nbsp;use?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;simmer&lt;/code&gt; package is a relatively new R package for discrete event simulation
(&lt;span class="caps"&gt;DES&lt;/span&gt;).  It&amp;#8217;s an exciting development, because there isn&amp;#8217;t a lot of open-source
&lt;span class="caps"&gt;DES&lt;/span&gt; software.  &lt;code&gt;SimPy&lt;/code&gt; seems to be the only serious competitor for teaching
&lt;span class="caps"&gt;DES&lt;/span&gt; and queueing&amp;nbsp;theory.&lt;/p&gt;
&lt;p&gt;This post does three&amp;nbsp;things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ports the code of the main &lt;code&gt;SimPy&lt;/code&gt; tutorial &lt;a href="https://pythonhosted.org/SimPy/Tutorials/TheBank.html"&gt;&amp;#8216;The Bank&amp;#8217;&lt;/a&gt; to &lt;code&gt;simmer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Opines that &lt;code&gt;simmer&lt;/code&gt; would be easier to teach as part of a queueing theory&amp;nbsp;course.&lt;/li&gt;
&lt;li&gt;Pursues a random red&amp;nbsp;herring.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-not-simpy-3"&gt;Why not SimPy&amp;nbsp;3?&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;SimPy&lt;/code&gt; 2 (for Python 2), because it is the last version developed by the
original author, because it was the version I was taught, only last year, and
because, in one crucial respect (monitoring), it&amp;#8217;s &lt;a href="https://simpy.readthedocs.io/en/latest/topical_guides/monitoring.html"&gt;much easier to
use&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-bank"&gt;The&amp;nbsp;Bank&lt;/h2&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;The Bank&amp;#8217; is a tutorial that develops &lt;span class="caps"&gt;DES&lt;/span&gt; concepts and techniques by simulating
the paths of customers at a bank.  The arrivals (customers) queue for a server
(counter), are served, and&amp;nbsp;exit.&lt;/p&gt;
&lt;h2 id="complete-example"&gt;Complete&amp;nbsp;example&lt;/h2&gt;
&lt;p&gt;The actual ported code is available &lt;a href="https://github.com/nacnudus/simmer-bank"&gt;on
GitHub&lt;/a&gt;, and I only give simple
examples in this post.  The first example is&amp;nbsp;complete.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;SimPy&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; bank01: The single non-random Customer &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;           
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;SimPy.Simulation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;                           

&lt;span class="c"&gt;## Model components -----------------------------        &lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                 
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Customer arrives, looks around and leaves &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeInBank&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                          
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; Here I am&amp;quot;&lt;/span&gt;               
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeInBank&lt;/span&gt;                       
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; I must leave&amp;quot;&lt;/span&gt;            

&lt;span class="c"&gt;## Experiment data ------------------------------&lt;/span&gt;

&lt;span class="n"&gt;maxTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;     &lt;span class="c"&gt;# minutes                            &lt;/span&gt;
&lt;span class="n"&gt;timeInBank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;   &lt;span class="c"&gt;# minutes&lt;/span&gt;

&lt;span class="c"&gt;## Model/Experiment ------------------------------&lt;/span&gt;

&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                             
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Klaus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               
&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeInBank&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   
&lt;span class="n"&gt;simulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;maxTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## 5.0 Klaus  Here I am
## 15.0 Klaus  I must leave
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, &lt;code&gt;simmer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# bank01: The single non-random customer&lt;/span&gt;
&lt;span class="kp"&gt;suppressMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;simmer&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;## Experiment data ------------------------------&lt;/span&gt;

maxTime &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;     &lt;span class="c1"&gt;# minutes                            &lt;/span&gt;
timeInBank &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;   &lt;span class="c1"&gt;# minutes&lt;/span&gt;

&lt;span class="c1"&gt;## Model components -----------------------------        &lt;/span&gt;

customer &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; 
  create_trajectory&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Customer&amp;#39;s path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  timeout&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;timeInBank&lt;span class="p"&gt;})&lt;/span&gt; 

&lt;span class="c1"&gt;## Model/Experiment ------------------------------&lt;/span&gt;

bank &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; simmer&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; add_generator&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Customer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; customer&lt;span class="p"&gt;,&lt;/span&gt; at&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## simmer environment: bank | now: 0 | next: 5
## { Generator: Customer | monitored: 1 | n_generated: 1 }
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; run&lt;span class="p"&gt;(&lt;/span&gt;until &lt;span class="o"&gt;=&lt;/span&gt; maxTime&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## simmer environment: bank | now: 15 | next: 
## { Generator: Customer | monitored: 1 | n_generated: 1 }
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_mon_arrivals
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;##        name start_time end_time activity_time finished replication
## 1 Customer0          5       15            10     TRUE           1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Already there are several differences that might make teaching queueing theory
with &lt;code&gt;simmer&lt;/code&gt; easier than with &lt;code&gt;SimPy&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The difference between &lt;code&gt;from X import Y&lt;/code&gt; and &lt;code&gt;Import X&lt;/code&gt; isn&amp;#8217;t&amp;nbsp;relevant.&lt;/li&gt;
&lt;li&gt;Whitespace doesn&amp;#8217;t&amp;nbsp;matter.&lt;/li&gt;
&lt;li&gt;The difference between integer and floating-point types doesn&amp;#8217;t matter&amp;nbsp;here.&lt;/li&gt;
&lt;li&gt;Arguments don&amp;#8217;t have to be&amp;nbsp;defined.&lt;/li&gt;
&lt;li&gt;References don&amp;#8217;t have to be&amp;nbsp;passed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt; is&amp;nbsp;irrelevant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; is more intuitive than &lt;code&gt;yield&lt;/code&gt; (&lt;code&gt;yield&lt;/code&gt; describes how the class
  behaves in the implementation of the &lt;span class="caps"&gt;DES&lt;/span&gt;, as it yields control back to the
  clock, whereas &lt;code&gt;timeout&lt;/code&gt; describes what the function does in the mind of the&amp;nbsp;modeller).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But there is one point that could be tricky, and that soon becomes&amp;nbsp;important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;add_generator&lt;/code&gt; both expect &lt;em&gt;functions&lt;/em&gt;, rather than vectors, to
  control (inter-)arrival time and timeout duration.  It would be nice to have
  syntactic sugar to handle vectors.  The reason for the functions is that, when
  a model is run indefinitely, a function can continue generating new arrival
  times and timeout durations, whereas a vector will soon be&amp;nbsp;exhausted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-fragments"&gt;Example&amp;nbsp;fragments&lt;/h2&gt;
&lt;p&gt;Implementing the rest of the examples brought up a few other interesting&amp;nbsp;points.&lt;/p&gt;
&lt;h3 id="generate-more-than-one-arrival"&gt;Generate more than one&amp;nbsp;arrival&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;SimPy&lt;/code&gt; examples, to generate &lt;code&gt;n &amp;gt; 1&lt;/code&gt; arrivals, the &lt;code&gt;activate&lt;/code&gt; code to
generate them moves inside the &lt;code&gt;Source&lt;/code&gt; class.  To explain why requires a quite
a lot of understanding/intuition of object-oriented programming that isn&amp;#8217;t
relevant to learning about queuing theory.  &lt;code&gt;Simmer&lt;/code&gt; doesn&amp;#8217;t present this&amp;nbsp;difficulty.&lt;/p&gt;
&lt;h3 id="limit-the-number-of-arrivals"&gt;Limit the number of&amp;nbsp;arrivals&lt;/h3&gt;
&lt;p&gt;Arrivals with random inter-arrival times would be generated indefinitely by
&lt;code&gt;bank %&amp;gt;% add_generator("Customer", customer, function() {runif(1)})&lt;/code&gt;.  To limit
this to &lt;code&gt;n = 10&lt;/code&gt; arrivals, you might try &lt;code&gt;times &amp;lt;- runif(10); bank %&amp;gt;%
add_generator("Customer", customer, times)&lt;/code&gt;, but it doesn&amp;#8217;t work, because
&lt;code&gt;add_generator&lt;/code&gt; expects a function that &lt;em&gt;will&lt;/em&gt; supply inter-arrival times, not a
vector that &lt;em&gt;does&lt;/em&gt; supply&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Simmer&lt;/code&gt; provides a handy function, &lt;code&gt;at()&lt;/code&gt;, to
convert a vector to function, so you could do &lt;code&gt;add_generator("Customer", customer,
at(runif(10)))&lt;/code&gt;, except that this still doesn&amp;#8217;t work.  That&amp;#8217;s because &lt;code&gt;at()&lt;/code&gt;
is designed to convert &lt;em&gt;arrival&lt;/em&gt; times into &lt;em&gt;inter-arrival&lt;/em&gt; times, but the
&lt;code&gt;runif&lt;/code&gt; function is being used to provide &lt;em&gt;inter-arrival&lt;/em&gt; times in the first
place.  The final fix is to do &lt;code&gt;add_generator("Customer", customer, at(c(0,
cumsum(runif(10)))))&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="joining-the-shortest-queue"&gt;Joining the shortest&amp;nbsp;queue&lt;/h3&gt;
&lt;p&gt;This is a pain in both &lt;code&gt;SimPy&lt;/code&gt; and &lt;code&gt;simmer&lt;/code&gt;.  The &lt;code&gt;SimPy&lt;/code&gt; example creates a
method to return the length of each queue, and then the following code iterates
through the results until a queue is&amp;nbsp;chosen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Select the shortest queue&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                         
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Qlength&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;Qlength&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Qlength&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;  &lt;span class="c"&gt;# the chosen queue number                &lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="c"&gt;# Join the queue&lt;/span&gt;
&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;simmer&lt;/code&gt;, this is done by&amp;nbsp;branching:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;customer &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; 
  create_trajectory&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Customer&amp;#39;s path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    branch&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="c1"&gt;# Select the shortest queue&lt;/span&gt;
             &lt;span class="kp"&gt;which.min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_server_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                           bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_queue_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_server_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                           bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_queue_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
         merge &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="c1"&gt;# Join the first queue, if it was chosen&lt;/span&gt;
         create_trajectory&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branch1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
           seize&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
           timeout&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;rexp&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;timeInBank&lt;span class="p"&gt;)})&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
           release&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="c1"&gt;# Otherwise join the second queue, if it was chosen&lt;/span&gt;
         create_trajectory&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branch2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
           seize&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
           timeout&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;rexp&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;timeInBank&lt;span class="p"&gt;)})&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
           release&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I mucked about for a while trying to avoid branching by using attributes to name
the server at &lt;code&gt;seize&lt;/code&gt; time. I won&amp;#8217;t explain attributes here because they&amp;#8217;re
covered in the excellent &lt;code&gt;simmer&lt;/code&gt; &lt;a href=""&gt;vignettes&lt;/a&gt;, but basically the following
code doesn&amp;#8217;t work because attributes are only available to certain arguments,
the &lt;code&gt;resource&lt;/code&gt; argument not among them, only &lt;code&gt;amount&lt;/code&gt; and perhaps
&lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;preemptible&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# This doesn&amp;#39;t work:&lt;/span&gt;
customer &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; 
  create_trajectory&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Customer&amp;#39;s path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class="c1"&gt;# Attributes can be set, to choose the queue&lt;/span&gt;
    set_attribute&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kp"&gt;which.min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_server_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                  bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_queue_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_server_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                  bank &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; get_queue_count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))})&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class="c1"&gt;# But they aren&amp;#39;t available in the `resource` argument of `seize` for naming&lt;/span&gt;
    &lt;span class="c1"&gt;# the server, so this doesn&amp;#39;t work.&lt;/span&gt;
    seize&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;attrs&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; attrs&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])})&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    timeout&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;rexp&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;timeInBank&lt;span class="p"&gt;)})&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    release&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;attrs&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; attrs&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="monitoring"&gt;Monitoring&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Simmer&lt;/code&gt; has a killer feature: everything is monitored automatically, and
reported in handy data frames.  This works especially well when doing many&amp;nbsp;replications.&lt;/p&gt;
&lt;p&gt;But it isn&amp;#8217;t obvious how to do the equivalent of, in Python, injecting &lt;code&gt;print&lt;/code&gt;
or &lt;code&gt;cat&lt;/code&gt; commands to describe the state of particular arrivals and servers.
Presumably something could be done in the functions passed to &lt;code&gt;dist&lt;/code&gt; arguments.
In this sence, &lt;code&gt;simmer&lt;/code&gt; is more declarative; like a story book, where the text
describes the characters, but the characters don&amp;#8217;t really exist.  &lt;code&gt;Simmer&lt;/code&gt;
describes arrivals and servers, but they don&amp;#8217;t really exist, and can&amp;#8217;t be
directly interacted&amp;nbsp;with.&lt;/p&gt;
&lt;h2 id="random-red-herring"&gt;Random red&amp;nbsp;herring&lt;/h2&gt;
&lt;p&gt;Python 2.7, R and &lt;span class="caps"&gt;MATLAB&lt;/span&gt; all use the Mersenne-Twister algorithm by default.  But
none of them matches.  The &lt;code&gt;numpy&lt;/code&gt; Python package &lt;a href="http://www.walkingrandomly.com/?p=5479"&gt;&lt;em&gt;does&lt;/em&gt; match
&lt;span class="caps"&gt;MATLAB&lt;/span&gt;&lt;/a&gt; (except for seed = 0), but not&amp;nbsp;R.&lt;/p&gt;
&lt;p&gt;Two potential solutions&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate any old random numbers, write them to disk, and read them into both
  Python and&amp;nbsp;R.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;rpy2&lt;/code&gt; to use R&amp;#8217;s random number generator from within&amp;nbsp;Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used &lt;code&gt;rpy2&lt;/code&gt;, but it wasn&amp;#8217;t long before I encountered a more serious problem.
When random draws are conducted in more than one part of the code, the
programmer can&amp;#8217;t control the order of the draws.  That&amp;#8217;s up to &lt;code&gt;SimPy&lt;/code&gt; and
&lt;code&gt;simmer&lt;/code&gt;.  At that point, I gave&amp;nbsp;up.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Garmonsway</dc:creator><pubDate>Wed, 11 May 2016 00:00:00 +1200</pubDate><guid>tag:nacnudus.github.io,2016-05-11:crossprod/simmer-vs-simpy-the-bank-part-i</guid><category>R</category><category>Simmer</category><category>SimPy</category></item><item><title>New R package:Â nzcrash</title><link>http://nacnudus.github.io/crossprod/new-r-package-nzcrash</link><description>&lt;h1 id="introducing-the-nzcrash-package"&gt;Introducing the nzcrash&amp;nbsp;package&lt;/h1&gt;
&lt;p&gt;This &lt;a href="https://github.com/nacnudus/nzcrash"&gt;package&lt;/a&gt; redistributes crash statistics already available from the New Zealand Transport Agency, but in a more convenient&amp;nbsp;form.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a large package (over 20 megabytes,&amp;nbsp;compressed).&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;library&lt;/span&gt;(nzcrash)
&lt;span class="kw"&gt;library&lt;/span&gt;(dplyr)
&lt;span class="kw"&gt;library&lt;/span&gt;(tidyr)
&lt;span class="kw"&gt;library&lt;/span&gt;(magrittr)
&lt;span class="kw"&gt;library&lt;/span&gt;(stringr)
&lt;span class="kw"&gt;library&lt;/span&gt;(ggplot2)
&lt;span class="kw"&gt;library&lt;/span&gt;(scales)
&lt;span class="kw"&gt;library&lt;/span&gt;(lubridate)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="datasets"&gt;Datasets&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;crashes&lt;/code&gt; dataset describes most facts about a crash. The datasets &lt;code&gt;causes&lt;/code&gt;, &lt;code&gt;vehicles&lt;/code&gt;, and &lt;code&gt;objects_struck&lt;/code&gt; describe facts that are in a many-to-one relationship with crashes. They can be joined to the &lt;code&gt;crashes&lt;/code&gt; dataset by the common &lt;code&gt;id&lt;/code&gt; column. The &lt;code&gt;causes&lt;/code&gt; dataset can additionally be joined to the &lt;code&gt;vehicles&lt;/code&gt; dataset by the combination of the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;vehicle_id&lt;/code&gt; columns. This is most useful when the resulting table is also joined to the &lt;code&gt;crashes&lt;/code&gt; dataset.&lt;/p&gt;
&lt;h2 id="up-to-date-ness"&gt;Up-to-date-ness&lt;/h2&gt;
&lt;p&gt;The data was last scraped from the &lt;span class="caps"&gt;NZTA&lt;/span&gt; website on 2015-07-20. At that time, the &lt;span class="caps"&gt;NZTA&lt;/span&gt; had published data up to the&amp;nbsp;2015-03-10.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;dim&lt;/span&gt;(crashes)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 540888     32&lt;/code&gt;&lt;/pre&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;dim&lt;/span&gt;(causes)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 888072      7&lt;/code&gt;&lt;/pre&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;dim&lt;/span&gt;(vehicles)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 979930      3&lt;/code&gt;&lt;/pre&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;dim&lt;/span&gt;(objects_struck)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 261276      3&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="accuracy"&gt;Accuracy&lt;/h2&gt;
&lt;p&gt;The &lt;a href="http://www.transport.govt.nz/research/roadtoll/#5"&gt;&lt;span class="caps"&gt;NZTA&lt;/span&gt;&lt;/a&gt;, doesn&amp;#8217;t agree with &lt;a href="http://www.transport.govt.nz/research/roadtoll/annualroadtollhistoricalinformation/"&gt;itself&lt;/a&gt; about recent annual road tolls, and this dataset gives a third&amp;nbsp;opinion.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(severity ==&lt;span class="st"&gt; &amp;quot;fatal&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;group_by&lt;/span&gt;(&lt;span class="dt"&gt;year =&lt;/span&gt; &lt;span class="kw"&gt;year&lt;/span&gt;(date)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;summarize&lt;/span&gt;(&lt;span class="dt"&gt;fatalities =&lt;/span&gt; &lt;span class="kw"&gt;sum&lt;/span&gt;(fatalities))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [16 x 2]
## 
##    year fatalities
## 1  2000        462
## 2  2001        455
## 3  2002        405
## 4  2003        461
## 5  2004        435
## 6  2005        405
## 7  2006        393
## 8  2007        421
## 9  2008        366
## 10 2009        384
## 11 2010        375
## 12 2011        284
## 13 2012        308
## 14 2013        256
## 15 2014        279
## 16 2015         34&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="severity"&gt;Severity&lt;/h2&gt;
&lt;p&gt;Crashes categorised as &amp;#8220;fatal&amp;#8221;, &amp;#8220;serious&amp;#8221;, &amp;#8220;minor&amp;#8221; or &amp;#8220;non-injury&amp;#8221;, based on the casualties. If there are any fatalities, then the crash is a &amp;#8220;fatal&amp;#8221; crash, otherwise if there are any &amp;#8216;severe&amp;#8217; injuries, the crash is a &amp;#8220;serious&amp;#8221;&amp;nbsp;crash.&lt;/p&gt;
&lt;p&gt;The definition of a &amp;#8216;severe&amp;#8217; injury is not&amp;nbsp;clear.&lt;/p&gt;
&lt;p&gt;Minor and non-injury crashes are likely to be under-recorded since they often do not involve the police, who write most of the crash reports upon which these datasets are&amp;nbsp;based.&lt;/p&gt;
&lt;p&gt;A common mistake is to confuse the number of fatal crashes with the number of&amp;nbsp;fatalities.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(severity ==&lt;span class="st"&gt; &amp;quot;fatal&amp;quot;&lt;/span&gt;) %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;nrow&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5042&lt;/code&gt;&lt;/pre&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;sum&lt;/span&gt;(crashes$fatalities)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5723&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="dates-and-times"&gt;Dates and&amp;nbsp;times&lt;/h2&gt;
&lt;p&gt;Three columns of the &lt;code&gt;crashes&lt;/code&gt; dataset describe the date and time of the crash in the &lt;span class="caps"&gt;NZST&lt;/span&gt; time zone&amp;nbsp;(Pacific/Auckland).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt; gives the date without the&amp;nbsp;time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; gives the time where this is available, and &lt;span class="caps"&gt;NA&lt;/span&gt; otherwise. Times are stored as date-times on the first of January,&amp;nbsp;1970.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime&lt;/code&gt; gives the date and time in one value when both are available, and &lt;span class="caps"&gt;NA&lt;/span&gt; otherwise. &lt;code&gt;date&lt;/code&gt; is always available, however &lt;code&gt;time&lt;/code&gt; is&amp;nbsp;not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When aggregating by some function of the date, e.g. by year, then always start from the &lt;code&gt;date&lt;/code&gt; column unless you also need the time. This ensures against accidentally discounting crashes where a time is not&amp;nbsp;recorded.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(&lt;span class="kw"&gt;is.na&lt;/span&gt;(time)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;count&lt;/span&gt;(&lt;span class="dt"&gt;year =&lt;/span&gt; &lt;span class="kw"&gt;year&lt;/span&gt;(date)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;ggplot&lt;/span&gt;(&lt;span class="kw"&gt;aes&lt;/span&gt;(year, n)) +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;geom_line&lt;/span&gt;() +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;ggtitle&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Crashes missing&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;time-of-day information&amp;quot;&lt;/span&gt;)

crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(&lt;span class="kw"&gt;is.na&lt;/span&gt;(time)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;count&lt;/span&gt;(&lt;span class="dt"&gt;year =&lt;/span&gt; &lt;span class="kw"&gt;year&lt;/span&gt;(date)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;mutate&lt;/span&gt;(&lt;span class="dt"&gt;percent =&lt;/span&gt; n/&lt;span class="kw"&gt;sum&lt;/span&gt;(n)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;ggplot&lt;/span&gt;(&lt;span class="kw"&gt;aes&lt;/span&gt;(year, percent)) +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;geom_line&lt;/span&gt;() +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;scale_y_continuous&lt;/span&gt;(&lt;span class="dt"&gt;labels =&lt;/span&gt; percent) +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;ggtitle&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Percent of crashes missing&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;time-of-day information&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="nzcrash_release_files/figure-markdown_github/unnamed-chunk-5-1.png" /&gt; &lt;img src="nzcrash_release_files/figure-markdown_github/unnamed-chunk-5-2.png" /&gt;&lt;/p&gt;
&lt;h2 id="location-coordinates"&gt;Location&amp;nbsp;coordinates&lt;/h2&gt;
&lt;p&gt;99.9% of crashes have coordinates. These have been converted from the &lt;span class="caps"&gt;NZTM&lt;/span&gt; projection to the &lt;span class="caps"&gt;WGS84&lt;/span&gt; projection for convenience with packages like &lt;code&gt;ggmap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because New Zealand is tall and skinny, you can easily spot the main population centres with a simple&amp;nbsp;boxplot.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;ggplot&lt;/span&gt;(&lt;span class="kw"&gt;aes&lt;/span&gt;(northing)) +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;geom_histogram&lt;/span&gt;(&lt;span class="dt"&gt;binwidth =&lt;/span&gt; .&lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src="nzcrash_release_files/figure-markdown_github/unnamed-chunk-6-1.png" /&gt;
&lt;/figure&gt;
&lt;h2 id="vehicles"&gt;Vehicles&lt;/h2&gt;
&lt;p&gt;There can be many vehicles in one crash, so vehicles are recorded in a separate &lt;code&gt;vehicles&lt;/code&gt; dataset that can be joined to &lt;code&gt;crashes&lt;/code&gt; by the common &lt;code&gt;id&lt;/code&gt; column.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;inner_join&lt;/span&gt;(vehicles, &lt;span class="dt"&gt;by =&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;count&lt;/span&gt;(vehicle) %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;arrange&lt;/span&gt;(&lt;span class="kw"&gt;desc&lt;/span&gt;(n))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [12 x 2]
## 
##               vehicle      n
## 1                 Car 728119
## 2            Van, ute  87927
## 3  SUV or 4x4 vehicle  48269
## 4               Truck  44305
## 5          Motorcycle  17733
## 6                  NA  16996
## 7             Bicycle  15713
## 8                 Bus   8066
## 9    Taxi or taxi van   6792
## 10              Moped   3594
## 11   Other or unknown   2043
## 12         School bus    373&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="objects-struck"&gt;Objects&amp;nbsp;struck&lt;/h2&gt;
&lt;p&gt;There can be many objects struck in one crash, so these are recorded in a separate &lt;code&gt;objects_struck&lt;/code&gt; dataset that can be joined to &lt;code&gt;crashes&lt;/code&gt; by the common &lt;code&gt;id&lt;/code&gt; column.&lt;/p&gt;
&lt;p&gt;Q: What are more fatal, trees or lamp&amp;nbsp;posts?&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;inner_join&lt;/span&gt;(objects_struck, &lt;span class="dt"&gt;by =&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(object %in%&lt;span class="st"&gt; &lt;/span&gt;&lt;span class="kw"&gt;c&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Trees, shrubbery of a substantial nature&amp;quot;&lt;/span&gt;
                               , &lt;span class="st"&gt;&amp;quot;Utility pole, includes lighting columns&amp;quot;&lt;/span&gt;)
  , severity !=&lt;span class="st"&gt; &amp;quot;non-injury&amp;quot;&lt;/span&gt;) %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;&lt;span class="co"&gt;# non-injury crashes are poorly recorded&lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;count&lt;/span&gt;(object, severity) %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;group_by&lt;/span&gt;(object) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;mutate&lt;/span&gt;(&lt;span class="dt"&gt;percent =&lt;/span&gt; n/&lt;span class="kw"&gt;sum&lt;/span&gt;(n)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;select&lt;/span&gt;(-n) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;spread&lt;/span&gt;(severity, percent)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [2 x 4]
## 
##                                     object      fatal   serious     minor
## 1  Utility pole, includes lighting columns 0.04432701 0.2149482 0.7407248
## 2 Trees, shrubbery of a substantial nature 0.06742092 0.2459016 0.6866774&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A: Trees (Don&amp;#8217;t worry, I know it&amp;#8217;s harder than&amp;nbsp;that.)&lt;/p&gt;
&lt;h2 id="causes"&gt;Causes&lt;/h2&gt;
&lt;p&gt;Causes can be joined either to the &lt;code&gt;crashes&lt;/code&gt; dataset (by the common &lt;code&gt;id&lt;/code&gt; column), or to the &lt;code&gt;vehicles&lt;/code&gt; dataset (by both of the commont &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;vehicle_id&lt;/code&gt;)&amp;nbsp;columns.&lt;/p&gt;
&lt;p&gt;The main cause groups are given in the &lt;code&gt;causes_category&lt;/code&gt; column.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;inner_join&lt;/span&gt;(causes, &lt;span class="dt"&gt;by =&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;group_by&lt;/span&gt;(cause_category, id) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;tally %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;group_by&lt;/span&gt;(cause_category) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;summarize&lt;/span&gt;(&lt;span class="dt"&gt;n =&lt;/span&gt; &lt;span class="kw"&gt;n&lt;/span&gt;()) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;arrange&lt;/span&gt;(&lt;span class="kw"&gt;desc&lt;/span&gt;(n)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;mutate&lt;/span&gt;(&lt;span class="dt"&gt;cause_category =&lt;/span&gt; &lt;span class="kw"&gt;factor&lt;/span&gt;(cause_category, &lt;span class="dt"&gt;levels =&lt;/span&gt; cause_category)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;ggplot&lt;/span&gt;(&lt;span class="kw"&gt;aes&lt;/span&gt;(cause_category, n)) +&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;geom_bar&lt;/span&gt;(&lt;span class="dt"&gt;stat =&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;identity&amp;quot;&lt;/span&gt;) +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;theme&lt;/span&gt;(&lt;span class="dt"&gt;axis.text.x =&lt;/span&gt; &lt;span class="kw"&gt;element_text&lt;/span&gt;(&lt;span class="dt"&gt;angle =&lt;/span&gt; &lt;span class="dv"&gt;90&lt;/span&gt;, &lt;span class="dt"&gt;hjust =&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dt"&gt;vjust =&lt;/span&gt; .&lt;span class="dv"&gt;5&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src="nzcrash_release_files/figure-markdown_github/unnamed-chunk-9-1.png" /&gt;
&lt;/figure&gt;
&lt;p&gt;That&amp;#8217;s odd &amp;#8212; where are speed, alcohol, and restraints? They&amp;#8217;re given in &lt;code&gt;cause_subcategory&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;causes %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(cause_subcategory ==&lt;span class="st"&gt; &amp;quot;Too fast for conditions&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;count&lt;/span&gt;(cause) %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;arrange&lt;/span&gt;(&lt;span class="kw"&gt;desc&lt;/span&gt;(n))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [8 x 2]
## 
##                                cause     n
## 1                          Cornering 37861
## 2                        On straight 10196
## 3                                 NA  7119
## 4        To give way at intersection  1658
## 5           At temporary speed limit  1010
## 6              At crash or emergency    55
## 7       Approaching railway crossing    44
## 8 When passing stationary school bus    37&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#8217;s nothing there about speed limit violations, because it&amp;#8217;s impossible to tell what speed a vehicle was going at when it&amp;nbsp;crashed.&lt;/p&gt;
&lt;p&gt;More worryingly, how is &amp;#8220;Alcohol test below limit&amp;#8221; a cause for a crash? Hopefully they filter those out when making policy&amp;nbsp;decisions.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;levels&lt;/span&gt;(causes$cause) &amp;lt;-&lt;span class="st"&gt;                &lt;/span&gt;&lt;span class="co"&gt;# Wrap facet labels&lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;str_wrap&lt;/span&gt;(&lt;span class="kw"&gt;levels&lt;/span&gt;(causes$cause), &lt;span class="dv"&gt;13&lt;/span&gt;)
crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;inner_join&lt;/span&gt;(causes, &lt;span class="dt"&gt;by =&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(cause_subcategory %in%&lt;span class="st"&gt; &lt;/span&gt;&lt;span class="kw"&gt;c&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Alcohol or drugs&amp;quot;&lt;/span&gt;)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;group_by&lt;/span&gt;(cause, id) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;tally %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;group_by&lt;/span&gt;(cause) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;summarize&lt;/span&gt;(&lt;span class="dt"&gt;n =&lt;/span&gt; &lt;span class="kw"&gt;n&lt;/span&gt;()) %&amp;gt;%&lt;span class="st"&gt;               &lt;/span&gt;&lt;span class="co"&gt;# This extra step deals with many causes per crash&lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;arrange&lt;/span&gt;(&lt;span class="kw"&gt;desc&lt;/span&gt;(n)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;mutate&lt;/span&gt;(&lt;span class="dt"&gt;cause=&lt;/span&gt; &lt;span class="kw"&gt;factor&lt;/span&gt;(cause, &lt;span class="dt"&gt;levels =&lt;/span&gt; cause)) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;ggplot&lt;/span&gt;(&lt;span class="kw"&gt;aes&lt;/span&gt;(cause, n)) +&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;geom_bar&lt;/span&gt;(&lt;span class="dt"&gt;stat =&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;identity&amp;quot;&lt;/span&gt;) +
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;theme&lt;/span&gt;(&lt;span class="dt"&gt;axis.text.x =&lt;/span&gt; &lt;span class="kw"&gt;element_text&lt;/span&gt;(&lt;span class="dt"&gt;angle =&lt;/span&gt; &lt;span class="dv"&gt;90&lt;/span&gt;, &lt;span class="dt"&gt;hjust =&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dt"&gt;vjust =&lt;/span&gt; .&lt;span class="dv"&gt;5&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src="nzcrash_release_files/figure-markdown_github/unnamed-chunk-11-1.png" /&gt;
&lt;/figure&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span class="kw"&gt;rm&lt;/span&gt;(causes)                             &lt;span class="co"&gt;# Because we messed up the factor levels&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time, join &lt;code&gt;causes&lt;/code&gt; to both &lt;code&gt;vehicles&lt;/code&gt; and &lt;code&gt;crashes&lt;/code&gt; to assess the drunken cyclist&amp;nbsp;menace.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;crashes %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(severity ==&lt;span class="st"&gt; &amp;quot;fatal&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;select&lt;/span&gt;(id) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;inner_join&lt;/span&gt;(vehicles, &lt;span class="dt"&gt;by =&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;) %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;filter&lt;/span&gt;(vehicle ==&lt;span class="st"&gt; &amp;quot;Bicycle&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;inner_join&lt;/span&gt;(causes, &lt;span class="dt"&gt;by =&lt;/span&gt; &lt;span class="kw"&gt;c&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;vehicle_id&amp;quot;&lt;/span&gt;)) %&amp;gt;%&lt;span class="st"&gt; &lt;/span&gt;
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;count&lt;/span&gt;(cause) %&amp;gt;%
&lt;span class="st"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;arrange&lt;/span&gt;(&lt;span class="kw"&gt;desc&lt;/span&gt;(n))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [55 x 2]
## 
##                                                                  cause  n
## 1  Behind when changing lanes position or direction (includes U-turns) 26
## 2                                                                   NA 20
## 3          When required to give way to traffic from another direction 10
## 4                                                Wandering or wobbling  8
## 5                                                     At Give Way sign  4
## 6                           Cyclist or M/cyclist wearing dark clothing  4
## 7                                        Driving or riding on footpath  4
## 8                                             On left without due care  4
## 9                              When pulling out or moving to the right  4
## 10                                                 At steady red light  3
## ..                                                                 ... ..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we all know what &amp;#8220;Wandering or wobbling&amp;#8221;&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://github.com/nacnudus/nzcrash"&gt;package&lt;/a&gt; on Github at&amp;nbsp;https://github.com/nacnudus/nzcrash.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Garmonsway</dc:creator><pubDate>Mon, 13 Jul 2015 00:00:00 +1200</pubDate><guid>tag:nacnudus.github.io,2015-07-13:crossprod/new-r-package-nzcrash</guid><category>R</category></item></channel></rss>